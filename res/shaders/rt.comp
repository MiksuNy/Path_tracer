#version 460

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout (rgba32f, binding = 0) uniform image2D accumImage;

#define PI 3.14159265359
#define TWO_PI 6.28318530718
#define INFINITY 10000000.0
#define HIT_LIMIT 0.00001

const ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
const vec2 viewport = vec2(texelCoord) / vec2(imageSize(accumImage));
const vec2 viewportCenter = viewport - 0.5;

const vec2 accumTexSize = imageSize(accumImage);
const vec2 pixelPos = vec2(viewportCenter.x * accumTexSize.x / accumTexSize.y, viewportCenter.y);

uniform int currAccumPass;

uniform bool debugNormal;

const int maxBounces = debugNormal ? 1 : 4;

const vec3 skyColor = vec3(0.0);
const float skyIntensity = 1.0;

struct Ray { vec3 origin; vec3 direction; };
struct Camera {
	vec3 position;
	mat4 inverseView;
};
struct Material {
    vec4 baseColor;
    vec4 emissionColor;
    float roughness;
    float metallic;
    float emissionStrength;
    float ior;
    float refractionAmount;
	/* + 12 bytes */
}; // 64 bytes
struct Triangle { vec4 p1; vec4 p2; vec4 p3; uint materialIndex; /* + 12 bytes */ }; // 64 bytes
struct Node { vec4 boundsMin; vec4 boundsMax; uint triIndex; uint numTris; uint childrenIndex; /* + 4 bytes */}; // 48 bytes
struct HitInfo { vec3 hitPoint; vec3 hitNormal; float hitDist; float travelDist; bool hasHit; bool frontFace; Material hitMaterial; };

uniform Camera cam;

layout (std430, binding = 1) readonly buffer meshSSBO {
	Triangle meshTriangles[];
};
layout (std430, binding = 2) readonly buffer bvhSSBO {
	Node nodes[];
};
layout (std430, binding = 3) readonly buffer materialSSBO {
	Material sceneMaterials[];
};

uint NextRandom(inout uint state) {
	state = state * 747796405 + 2891336453;
	uint result = ((state >> ((state >> 28) + 4)) ^ state) * 277803737;
	result = (result >> 22) ^ result;
	return result;
}

float RandomValue(inout uint state) {
	return NextRandom(state) / 4294967295.0; // 2^32 - 1
}

float RandomValueND(inout uint state) {
	float theta = TWO_PI * RandomValue(state);
	float rho = sqrt(-2 * log(RandomValue(state)));
	return rho * cos(theta);
}

vec3 RandomDirection(inout uint state) {
	float x = RandomValueND(state);
	float y = RandomValueND(state);
	float z = RandomValueND(state);
	return normalize(vec3(x, y, z));
}

vec3 RandomInHemisphere(in vec3 normal, inout uint state) {
	vec3 randomInSphere = RandomDirection(state);
	return dot(randomInSphere, normal) > 0.0 ? randomInSphere : -randomInSphere;
}

// https://tavianator.com/2011/ray_box.html
bool HitAABB(in vec3 boundsMin, in vec3 boundsMax, const in Ray ray) {
	const vec3 invDir = (1.0/ray.direction);

	const float tx1 = (boundsMin.x - ray.origin.x)*invDir.x;
	const float tx2 = (boundsMax.x - ray.origin.x)*invDir.x;

	float tMin = min(tx1, tx2);
	float tMax = max(tx1, tx2);

	const float ty1 = (boundsMin.y - ray.origin.y)*invDir.y;
	const float ty2 = (boundsMax.y - ray.origin.y)*invDir.y;

	tMin = max(tMin, min(ty1, ty2));
	tMax = min(tMax, max(ty1, ty2));

	const float tz1 = (boundsMin.z - ray.origin.z)*invDir.z;
	const float tz2 = (boundsMax.z - ray.origin.z)*invDir.z;

	tMin = max(tMin, min(tz1, tz2));
	tMax = min(tMax, max(tz1, tz2));

	return tMax >= tMin && tMax >= 0;
};

// https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm
HitInfo HitTriangle(in Triangle tri, const in Ray ray) {
	HitInfo tempHitInfo;
	tempHitInfo.hasHit = false;

	const vec3 edge1 = tri.p2.xyz - tri.p1.xyz;
	const vec3 edge2 = tri.p3.xyz - tri.p1.xyz;
	const vec3 rayCrossE2 = cross(ray.direction, edge2);
	const float det = dot(edge1, rayCrossE2);

	const float invDet = 1.0 / det;
	const vec3 s = ray.origin - tri.p1.xyz;
	const float u = invDet * dot(s, rayCrossE2);

	const vec3 sCrossE1 = cross(s, edge1);
	const float v = invDet * dot(ray.direction, sCrossE1);
	
	const float t = invDet * dot(edge2, sCrossE1);

	const vec3 normal = normalize(cross(edge1, edge2));

	tempHitInfo.hasHit = t > HIT_LIMIT && !(det < 0.0 && det > -0.0) && !(u < 0 || u > 1) && !(v < 0 || u + v > 1);
	tempHitInfo.frontFace = !(det < 0.0);
	tempHitInfo.hitPoint = ray.origin + ray.direction * t;
	tempHitInfo.hitDist = t;
	tempHitInfo.hitNormal = tempHitInfo.frontFace ? normal : -normal; // Determine tri normal by which side of the tri was hit
	tempHitInfo.hitMaterial = sceneMaterials[tri.materialIndex];
	return tempHitInfo;
}

void TraverseBVH(inout HitInfo result, const in Ray ray) {
	Node nodeStack[6];
	uint stackIndex = 0;
	nodeStack[stackIndex++] = nodes[0];

	while (stackIndex > 0) {
		const Node node = nodeStack[--stackIndex];

		if (HitAABB(node.boundsMin.xyz, node.boundsMax.xyz, ray)) {
			if (node.numTris != 0) {
			for (uint i = node.triIndex; i < node.triIndex + node.numTris; ++i) {
					HitInfo triHit = HitTriangle(meshTriangles[i], ray);
					if (triHit.hasHit && triHit.hitDist < result.hitDist) result = triHit;
				}
			} else {
				nodeStack[stackIndex++] = nodes[node.childrenIndex + 1];
				nodeStack[stackIndex++] = nodes[node.childrenIndex];
			}
		}
	}
}

HitInfo CalculateRay(const in Ray ray) {
	HitInfo closestHit;
	closestHit.hitDist = INFINITY;
	HitInfo tempHit;

	// New mesh triangle test with BVH
	//TraverseBVH(closestHit, ray);

	// Old mesh triangle test
	if (HitAABB(nodes[0].boundsMin.xyz, nodes[0].boundsMax.xyz, ray)) {
		for (int i = 0; i < meshTriangles.length(); ++i) {
			tempHit = HitTriangle(meshTriangles[i], ray);
			if (tempHit.hasHit && tempHit.hitDist < closestHit.hitDist) closestHit = tempHit;
		}
	}

	return closestHit;
}

float Schlick(float ior, vec3 normal, vec3 rayDir) {
	float F0 = pow(ior - 1.0, 2) / pow(ior + 1.0, 2);
	float F = F0 + (1.0 - F0) * pow((1.0 - dot(normal, rayDir)), 5);
	return F;
}

vec3 RayTrace(in Ray ray, in int maxBounces, inout uint state) {
	vec3 rayColor = vec3(1);
	vec3 incomingLight = vec3(0);
	vec3 emittedLight = vec3(0);

	// BVH visualisation
//	for (int i = 0; i < nodes.length(); ++i) {
//		float color = 0.02;
//		if (HitAABB(nodes[i].boundsMin.xyz, nodes[i].boundsMax.xyz, ray)) incomingLight.xyz += color;
//	}

	// Raytracing
	int currBounces = 0;
	for (int i = 0; i < maxBounces; ++i) {

		HitInfo hitInfo = CalculateRay(ray);

		if (hitInfo.hasHit && hitInfo.hitDist < INFINITY) {

			if (debugNormal) return hitInfo.hitNormal;
			
			ray.origin = hitInfo.hitPoint;

			const vec3 randInHemiSphere = RandomInHemisphere(hitInfo.hitNormal, state);

			ray.direction = randInHemiSphere;

			ray.origin += ray.direction * HIT_LIMIT; // Make sure ray doesn't collide again on the same point

			emittedLight += hitInfo.hitMaterial.emissionColor.rgb * hitInfo.hitMaterial.emissionStrength;
			rayColor *= hitInfo.hitMaterial.baseColor.rgb;
			incomingLight += emittedLight * rayColor;
			
			currBounces++;
		} else {
			emittedLight += skyColor * skyIntensity;
			rayColor *= skyColor;
			incomingLight += emittedLight * rayColor;
			
			currBounces++;
			
			break;
		}
	}

	return incomingLight / currBounces;
}

void main() {
	const uint pixelIndex = uint(viewport.x / accumTexSize.x * 4294967295.0 + viewport.y / accumTexSize.y * 4294967295.0);
	uint rngState = uint(currAccumPass * pixelIndex);

	Ray ray;
	ray.origin = cam.position;

	const vec3 jitter = RandomDirection(rngState) * 0.0005; // For anti-aliasing
	ray.direction = normalize(vec3(cam.inverseView * vec4(-pixelPos.x + jitter.x, pixelPos.y + jitter.y, 1.0, 0.0)));

	vec3 rayTraceColor = RayTrace(ray, maxBounces, rngState);

	vec3 finalColor = mix(imageLoad(accumImage, texelCoord).rgb, rayTraceColor, 1.0 / currAccumPass);

	imageStore(accumImage, texelCoord, vec4(finalColor, 1.0));
}